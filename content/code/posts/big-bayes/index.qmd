---
title: "MCMC for 'Big Data' with Stan"
subtitle: "Faster sampling with CmdStan using within-chain parallelization"

date: 2022-06-05

abstract: |
  This post is an extension (and a translation to R) of [PyMC-Labs' benchmarking](https://www.pymc-labs.io/blog-posts/pymc-stan-benchmark/) of MCMC for "Big Data". 
  
  The Stan code was updated to use [within-chain parallelization](https://mc-stan.org/docs/2_30/stan-users-guide/reduce-sum.html) and [compiler optimization](https://mc-stan.org/docs/2_30/stan-users-guide/optimization.html) for faster CPU sampling. Stan was able to achieve similar sampling speeds as PyMC's JAX + GPU solution, purely on CPU.

website:
  open-graph:
    description: "An extension (and translation to R) of PyMC's benchmarks: Stan code was edited to use within-chain parallelization and compiler optimizations for faster sampling"
  twitter-card:
    description: "An extension (and translation to R) of PyMC's benchmarks: Stan code was edited to use within-chain parallelization and compiler optimizations for faster sampling"

aliases:
  - /content/posts/big-bayes/

categories:
  - "Statistics"
  - "ML"
  - "Bayesian Modeling"
  - "Big Data"
  - "Stan"
  - "R"
---

{{< include /content/_hr.qmd >}}

::: {.callout-caution}

By design, this post contains very few explanations. 

Its goal was simply to translate [PyMC's blog post](https://www.pymc-labs.io/blog-posts/pymc-stan-benchmark/) to R, and improve their Stan code for a fairer comparison with PyMC.

Feel free to read the original blog post to better understand what the code is doing.

:::

::: {.callout-tip}

You can check the page's source code by clicking on the **</> Code** button at the top-right.

:::


<!------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------>
# Setup {.unnumbered}
***

```{r}
#| echo: false
#| output: false

source(here::here("src", "init_min.R"), echo = FALSE)
```

```{r lockfile}
#| echo: false
#| eval: false
#| output: false

renv::use(
  "Rdatatable/data.table",
  "archive@1.1.6",
  "bayesplot@1.10.0",
  "dplyr@1.1.3",
  "ggplot2@3.4.3",
  "here@1.0.1",
  "lubridate@1.9.2",
  "patchwork@1.1.3",
  "pipebind@0.1.2",
  "posterior@1.4.1",
  "qs@0.25.5",
  "purrr@1.0.2",
  "readr@2.1.4",
  "stan-dev/cmdstanr",
  "stringr@1.5.0",
  "tibble@3.2.1",
  "tidyr@1.3.0",
  verbose = FALSE
)
```

```{r}
library(here)        # Working directory management
library(fs)          # File & folder manipulation
library(pipebind)    # Piping goodies
library(archive)     # Memory efficient object storage

library(cmdstanr)    # Lightweight R interface for Stan
library(posterior)   # Wrangling Stan models' output

library(data.table)  # Fast data manipulation (in-RAM)

library(tibble)      # Extending data.frames             (Tidyverse)
library(readr)       # Reading data from files           (Tidyverse)
library(dplyr)       # Manipulating data.frames - core   (Tidyverse)
library(tidyr)       # Manipulating data.frames - extras (Tidyverse)
library(stringr)     # Manipulating strings              (Tidyverse)
library(purrr)       # Manipulating lists                (Tidyverse)
library(lubridate)   # Manipulating date/time            (Tidyverse)
library(ggplot2)     # Best plotting library             (Tidyverse)

library(bayesplot)   # PPC/Diagnostic plots for Stan models
library(patchwork)   # Combining plots

options(
  mc.cores = max(1L, parallel::detectCores(logical = TRUE)),
  scipen = 999L, 
  digits = 4L,
  ggplot2.discrete.colour = \() scale_color_viridis_d(),
  ggplot2.discrete.fill = \() scale_fill_viridis_d()
)

nrows_print <- 10

setDTthreads(parallel::detectCores(logical = FALSE))
```


<!------------------------------------------------------------------------------>
## Stan setup {.unnumbered}

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Installing CmdStan"

cmdstanr::check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)

cpp_opts <- list(
  stan_threads = TRUE
  , STAN_CPP_OPTIMS = TRUE
  , STAN_NO_RANGE_CHECKS = TRUE # WARN: remove this if you haven't tested the model
  , PRECOMPILED_HEADERS = TRUE
  , CXXFLAGS_OPTIM = "-march=native -mtune=native"
  , CXXFLAGS_OPTIM_TBB = "-mtune=native -march=native"
  , CXXFLAGS_OPTIM_SUNDIALS = "-mtune=native -march=native"
)

cmdstanr::install_cmdstan(cpp_options = cpp_opts, quiet = TRUE)
```

```{r}
#| code-fold: true
#| code-summary: "Loading CmdStan (if already installed)"

highest_cmdstan_version <- dir_ls(config$cmdstan_path) |> 
  path_file() |> 
  keep(\(e) str_detect(e, "cmdstan-")) |> 
  bind(x, str_split(x, '-', simplify = TRUE)[,2]) |> 
  reduce(\(x, y) ifelse(utils::compareVersion(x, y) == 1, x, y))

set_cmdstan_path(glue::glue("{config$cmdstan_path}cmdstan-{highest_cmdstan_version}"))
```

```{r}
#| code-fold: true
#| code-summary: "Setting up knitr's engine for CmdStan"
#| file: !expr here("src", "common", "knitr", "knitr_cmdstan_engine.R")
```

***

:::{.callout-tip collapse="true"}

## ðŸ’» Expand for Session Info

```{r}
#| echo: false

si <- sessioninfo::session_info(pkgs = "attached")

si$platform$Quarto <- system("quarto --version", intern = TRUE)

si$platform$pandoc <- strsplit(si$platform$pandoc, "@")[[1]][1]

si$platform$`Stan (CmdStan)` <- cmdstanr::cmdstan_version()

si
```

:::

```{r}
#| echo: false

## This section is for the html output (code-linking, ...)

library(knitr)       # Rmd -> md
library(quarto)      # md -> Everything
library(downlit)     # For code linking
library(xml2)        # For code linking
library(withr)       # For code linking

#-------------------------#
#### Custom knit_hooks ####
#-------------------------#

TIMES <- list()
knitr::knit_hooks$set(time_it = local({
  start <- NULL
  function(before, options) {
    if (before) start <<- Sys.time()
    else TIMES[[options$label]] <<- difftime(Sys.time(), start)
  }
}))
```

```{r}
#| echo: false
#| output: false
#| file: !expr c(here("src", "common", "knitr", "knit_print_ggplot_bi.R"), here("src", "common", "knitr", "knit_print_gt_mono.R"))
```

<!------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------>
# Data
***

<!------------------------------------------------------------------------------>
## Matches data

<a class="btn btn-primary" target="_blank" href="/res/data/tennis/matches.zip" download="">
  <i class="bi bi-download"></i> Download the matches' data
</a>

Loading the matches' data:

```{r}
#| echo: false

matches_data_path <- here::here("res", "data", "tennis")
```

```{r}
#| output: false

matches_data_raw <- (
  read_csv(dir_ls(matches_data_path, regexp = "atp_matches_(.*).csv"), show_col_types = FALSE)
  |> select(tourney_date, tourney_level, round, winner_id, winner_name, loser_id, loser_name, score)
  |> mutate(tourney_date = lubridate::ymd(tourney_date))
)
```

Filtering and cleaning the combined matches' data (based on the [original post's data processing](https://github.com/martiningram/mcmc_runtime_comparison/blob/main/sackmann.py)):

```{r}
#| output: asis

round_numbers = list(
  "R128" = 1,
  "RR" = 1,
  "R64" = 2,
  "R32" = 3,
  "R16" = 4,
  "QF" = 5,
  "SF" = 6,
  "F" = 7
)

(matches_data_clean <- matches_data_raw 
  |> filter(
    tourney_date %between% c("1968-01-01", "2021-06-20"),
    str_detect(score, "RET|W/O|DEF|nbsp|Def.", negate = TRUE),
    str_length(score) > 4,
    tourney_level != "D",
    round %in% names(round_numbers)
  )
  |> mutate(
    round_number = recode(round, !!!round_numbers),
    label = 1
  )
  |> arrange(tourney_date, round_number)
  |> select(-round, -tourney_level)
)
```


<!------------------------------------------------------------------------------>
## Player data

<a class="btn btn-primary" target="_blank" href="/res/data/tennis/atp_players.csv" download="">
  <i class="bi bi-download"></i> Download the players' data
</a>

Loading the raw player data:

```{r}
#| output: asis

player_data_path <- here("res", "data", "tennis", "atp_players.csv")

(player_data_raw <- read_csv(player_data_path, show_col_types = FALSE) 
 |> mutate(player_name = str_c(name_first, name_last, sep = " "))
 |> select(player_id, player_name)
)
```

Filtering `player_data` to only keep the players actually present in our data, and updating their IDs:

```{r}
#| output: asis

(player_data <- with(matches_data_clean, tibble(player_id = union(winner_id, loser_id)))
 |> group_by(player_id) 
 |> summarize(player_idx = cur_group_id()) 
 |> left_join(player_data_raw)
)
```

<!-- DO NOT USE summarize(player_idx = cur_group_id(), .by = player_id) here -->


<!------------------------------------------------------------------------------>
## Matches + Player data

Allocating the new player IDs (`player_idx`) to the `winner_id` and `loser_id` from `matches_data`:

```{r}
#| output: asis

(matches_data <- left_join(matches_data_clean, player_data, by = c("winner_id" = "player_id")) 
 |> rename(winner_idx = player_idx) 
 |> relocate(winner_idx, .after = winner_id) 
 |> left_join(player_data, by = c("loser_id" = "player_id")) 
 |> rename(loser_idx = player_idx) 
 |> relocate(loser_idx, .after = loser_id)
 |> drop_na(winner_idx, loser_idx)
 |> select(-matches("player_name"))
)
```


<!------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------>
# Model
***

```{r}
#| echo: false

USE_CACHE <- TRUE

tennis_mod_path <- here::here("res", "models", "tennis_mod_stan.rds")
```

<!------------------------------------------------------------------------------>
## Stan code

:::{.callout-note appearance="simple"}
Updated Stan code with **within-chain parallelization**
:::

```{cmdstan, output.var = "tennis_mod_exe", eval = !USE_CACHE}
functions {
  array[] int sequence(int start, int end) {
    array[end - start + 1] int seq;
    for (n in 1 : num_elements(seq)) {
      seq[n] = n + start - 1;
    }
    return seq;
  }

  // Compute partial sums of the log-likelihood
  real partial_log_lik_lpmf(array[] int seq, int start, int end,
                            data array[] int labels, 
                            data array[] int winner_ids, 
                            data array[] int loser_ids, 
                            vector player_skills) {
    real ptarget = 0;
    int N = end - start + 1;

    vector[N] mu = rep_vector(0.0, N);
    for (n in 1 : N) {
      int nn = n + start - 1;
      mu[n] += player_skills[winner_ids[nn]] - player_skills[loser_ids[nn]];
    }
    ptarget += bernoulli_logit_lpmf(labels[start : end] | mu);
    return ptarget;
  }
}
data {
    int n_players;
    int n_matches;
    
    array[n_matches] int<lower=1, upper=n_players> winner_ids; // Winner of game n
    array[n_matches] int<lower=1, upper=n_players> loser_ids;  // Loser of game n
    array[n_matches] int<lower=0, upper=1> labels;             // Always 1 in this model
    
    int grainsize;
}
transformed data {
    array[n_matches] int seq = sequence(1, n_matches);
}
parameters {
    real<lower=0> player_sd;          // Scale of ability variation (hierarchical prior)
    vector[n_players] player_skills;  // Ability of player k
}
model {   
  player_sd ~ std_normal();
  player_skills ~ normal(0, player_sd);
    
  target += reduce_sum(
    partial_log_lik_lpmf, seq, grainsize, 
    labels, winner_ids, loser_ids, player_skills
  );
}
```

<!------------------------------------------------------------------------------>
## Stan data

```{r}
tennis_data_stan <- list(
  n_matches = nrow(matches_data),
  n_players = with(matches_data, length(union(winner_id, loser_id))),
  winner_ids = matches_data$winner_idx,
  loser_ids = matches_data$loser_idx,
  labels = matches_data$label,
  grainsize = max(100, nrow(matches_data) / 60)
)
```

```{r}
#| echo: false

str(tennis_data_stan)
```

<!------------------------------------------------------------------------------>
## Model fit

```{r}
#| eval: !expr USE_CACHE
#| echo: false

tennis_mod_fit <- readRDS(file_read(tennis_mod_path))
```

```{r}
#| label: "model_fit"
#| eval: !expr (!USE_CACHE)
#| output: false

tennis_mod_fit <- tennis_mod_exe$sample(
  data = tennis_data_stan, seed = 256,
  iter_warmup = 1000, iter_sampling = 1000, refresh = 0,
  chains = 4, parallel_chains = 4, threads_per_chain = 7
)
```

::: {.callout-note}

```{r}
#| echo: false

fts <- setDT(tennis_mod_fit$time()$chains)[, .(Chain = chain_id, Time = total)]

mean_ft <- fts[, lubridate::dseconds(mean(Time))] |> str_extract("~.* minutes")
```


Sampling takes `r mean_ft` on my CPU (Ryzen 5950X, 16 Cores/32 Threads), on WSL2 (Ubuntu 22)

```{r}
#| echo: false
#| output: asis

fts[, Time := as.character(lubridate::dseconds(Time))][]
```

:::

```{r}
#| label: "model_save"
#| eval: !expr (!USE_CACHE)
#| echo: false
#| output: false

tennis_mod_fit$draws()
tennis_mod_fit$sampler_diagnostics()

saveRDS(tennis_mod_fit,
  file_write(tennis_mod_path,
    filter = "zstd",
    options = "compression-level=22"
  )
)
```


<!------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------>
# Model diagnostics
***

```{r}
#| fig.width: 10
#| output: asis

mcmc_neff_hist(neff_ratio(tennis_mod_fit))
```

```{r}
#| fig.width: 10
#| output: asis

mcmc_rhat_hist(rhat(tennis_mod_fit))
```

**Plotting random subsets of the traces:**

```{r}
#| code-fold: true
#| code-summary: "hist_trace_plot"

hist_trace_plot <- function(mod, vars) {
  draws <- mod$draws(variables = vars, format = "draws_list")
  wrap_plots(
    mcmc_hist(draws, facet_args = list(nrow = length(vars))),
    mcmc_trace(draws, facet_args = list(nrow = length(vars))),
    widths = c(1, 1.5)
  )
}
```

```{r}
#| fig.width: 10
#| fig.height: 10
#| output: asis

hist_trace_plot(tennis_mod_fit, paste0("player_skills[", sample(player_data$player_idx, 5), "]"))
```


<!------------------------------------------------------------------------------>
<!------------------------------------------------------------------------------>
# Posterior Predictions
***

<!------------------------------------------------------------------------------>
## Posterior data

Getting our Posterior Predictions into long format and joining the result with `player_data`:

```{r}
#| output: asis

(player_skills <- tennis_mod_fit$draws(variables = "player_skills")
  |> bind(x, subset_draws(x, "player_skills", regex = TRUE, draw = sample.int(ndraws(x), size = 500)))
  |> as.data.table()
  |> _[, .(player_skills = list(value)), by = variable
  ][, let(player_idx = as.integer(str_extract(variable, "\\d{1,4}")), variable = NULL)
  ][, let(skill_mean = sapply(player_skills, mean), skill_sd = sapply(player_skills, sd))
  ][as.data.table(player_data), on = "player_idx", nomatch = NULL
  ][order(-skill_mean), .(player_name, player_id, player_idx, skill_mean, skill_sd, player_skills)]
)
```


<!------------------------------------------------------------------------------>
## Posterior plots

```{r}
#| code-fold: true
#| code-summary: "ridgeline_plot"

ridgeline_plot <- function(dat, var) {
  dat <- dat[, .(player_skills = unlist(player_skills)), by = setdiff(names(dat), 'player_skills')
     ][, player_name := factor(player_name, levels = rev(unique(player_name)))]
  
  return(
    ggplot(dat, aes(player_skills, y = {{ var }}, fill = {{ var }}))
    + geom_ribbon(
      stat = "density", outline.type = "upper", color = "grey30",
      aes(
        fill = stage({{ var }}, after_scale = alpha(fill, 0.5)),
        ymin = after_stat(group),
        ymax = after_stat(group + ndensity * 1.6)
      )
    )
    * ggblend::blend("multiply")
    + labs(x = "Player Skills", y = "")
    + scale_y_discrete(position = "right", labels = \(x) str_replace_all(x, "\\s", "\n"))
    + theme(legend.position = "none", axis.line.y = element_blank())
  )
}
```

Plotting the `player_skills` posteriors of the _top 10_ players:

```{r}
#| fig-height: 12
#| fig-width: 8
#| output: asis

head(player_skills, 10) |> ridgeline_plot(player_name)
```
